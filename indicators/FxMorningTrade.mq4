/*
   Generated by EX4-TO-MQ4 decompiler V4.0.224.1 []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "mark fric"
#property link      "http://www.forexmorningtrade.com"

#property indicator_chart_window

extern string BeginTime = "05:30";
extern string EndTime = "07:15";
extern color Color = DarkBlue;
extern color LabelColor = White;
extern int StopLossPips = 40;
extern int ProfitTargetPips = 40;
int g_corner_108 = 1;
int gi_112 = 200;
int g_x_116 = 5;
int gi_120 = 20;
int gi_unused_124 = 8421504;
double gd_128;
double gd_136;
int gi_144;
double gd_148 = 0.0;
double gd_156 = 0.0;

int init() {
   if (Digits < 4) gi_144 = 2;
   else gi_144 = 4;
   gd_156 = MathPow(10, gi_144);
   gd_148 = 1 / gd_156;
   gd_128 = StopLossPips * gd_148;
   gd_136 = ProfitTargetPips * gd_148;
   DeleteObjects();
   for (int l_count_0 = 0; l_count_0 < gi_112; l_count_0++) CreateObjects("FXM" + l_count_0, Color);
   ObjectCreate("line1", OBJ_LABEL, 0, 0, 0);
   ObjectSet("line1", OBJPROP_CORNER, g_corner_108);
   ObjectSet("line1", OBJPROP_YDISTANCE, gi_120 + 0);
   ObjectSet("line1", OBJPROP_XDISTANCE, g_x_116);
   ObjectSetText("line1", "ForexMorningTrade system", 9, "Tahoma", LabelColor);
   ObjectCreate("line2", OBJ_LABEL, 0, 0, 0);
   ObjectSet("line2", OBJPROP_CORNER, g_corner_108);
   ObjectSet("line2", OBJPROP_YDISTANCE, gi_120 + 12);
   ObjectSet("line2", OBJPROP_XDISTANCE, g_x_116);
   ObjectSetText("line2", "----------------------------------", 8, "Tahoma", LabelColor);
   ObjectCreate("linetime", OBJ_LABEL, 0, 0, 0);
   ObjectSet("linetime", OBJPROP_CORNER, g_corner_108);
   ObjectSet("linetime", OBJPROP_YDISTANCE, gi_120 + 24);
   ObjectSet("linetime", OBJPROP_XDISTANCE, g_x_116);
   ObjectSetText("linetime", "Signal:  not time for trade", 9, "Tahoma", LabelColor);
   ObjectCreate("lineprice", OBJ_LABEL, 0, 0, 0);
   ObjectSet("lineprice", OBJPROP_CORNER, g_corner_108);
   ObjectSet("lineprice", OBJPROP_YDISTANCE, gi_120 + 42);
   ObjectSet("lineprice", OBJPROP_XDISTANCE, g_x_116);
   ObjectSetText("lineprice", "Ideal entry price: -", 8, "Tahoma", LabelColor);
   ObjectCreate("linept", OBJ_LABEL, 0, 0, 0);
   ObjectSet("linept", OBJPROP_CORNER, g_corner_108);
   ObjectSet("linept", OBJPROP_YDISTANCE, gi_120 + 58);
   ObjectSet("linept", OBJPROP_XDISTANCE, g_x_116);
   ObjectSetText("linept", "Profit at: -", 8, "Tahoma", LabelColor);
   ObjectCreate("linesl", OBJ_LABEL, 0, 0, 0);
   ObjectSet("linesl", OBJPROP_CORNER, g_corner_108);
   ObjectSet("linesl", OBJPROP_YDISTANCE, gi_120 + 72);
   ObjectSet("linesl", OBJPROP_XDISTANCE, g_x_116);
   ObjectSetText("linesl", "Stop loss at: -", 8, "Tahoma", LabelColor);
   ObjectCreate("line3", OBJ_LABEL, 0, 0, 0);
   ObjectSet("line3", OBJPROP_CORNER, g_corner_108);
   ObjectSet("line3", OBJPROP_YDISTANCE, gi_120 + 84);
   ObjectSet("line3", OBJPROP_XDISTANCE, g_x_116);
   ObjectSetText("line3", "----------------------------------", 8, "Tahoma", LabelColor);
   ObjectCreate("line4", OBJ_LABEL, 0, 0, 0);
   ObjectSet("line4", OBJPROP_CORNER, g_corner_108);
   ObjectSet("line4", OBJPROP_YDISTANCE, gi_120 + 96);
   ObjectSet("line4", OBJPROP_XDISTANCE, g_x_116);
   ObjectSetText("line4", "www.ForexMorningTrade.com", 8, "Tahoma", LabelColor);
   return (0);
}

int deinit() {
   DeleteObjects();
   ObjectDelete("line1");
   ObjectDelete("line2");
   ObjectDelete("linetime");
   ObjectDelete("lineprice");
   ObjectDelete("linept");
   ObjectDelete("linesl");
   ObjectDelete("line3");
   ObjectDelete("line4");
   return (0);
}

int start() {
   int l_ind_counted_0 = IndicatorCounted();
   int l_datetime_4 = TimeCurrent();
   for (int l_count_8 = 0; l_count_8 < gi_112; l_count_8++) {
      DrawObjects(l_datetime_4, "FXM" + l_count_8, BeginTime, EndTime);
      for (l_datetime_4 = DecreaseDateTradeDay(l_datetime_4); TimeDayOfWeek(l_datetime_4) > 5; l_datetime_4 = DecreaseDateTradeDay(l_datetime_4)) {
      }
   }
   if (TimeToStr(Time[0], TIME_MINUTES) == BeginTime) {
      Print("IS time: ", TimeToStr(Time[0], TIME_MINUTES));
      SetSignalVariables(getSignal());
      return (0);
   }
   SetSignalVariables(1000);
   Print("Not time: ", TimeToStr(Time[0], TIME_MINUTES));
   return (0);
}

void DeleteObjects() {
   for (int l_count_0 = 0; l_count_0 < gi_112; l_count_0++) ObjectDelete("FXM" + l_count_0);
}

void CreateObjects(string a_name_0, color a_color_8) {
   ObjectCreate(a_name_0, OBJ_RECTANGLE, 0, 0, 0, 0, 0);
   ObjectSet(a_name_0, OBJPROP_STYLE, STYLE_SOLID);
   ObjectSet(a_name_0, OBJPROP_COLOR, a_color_8);
   ObjectSet(a_name_0, OBJPROP_BACK, TRUE);
}

int DecreaseDateTradeDay(int ai_0) {
   int li_4 = TimeYear(ai_0);
   int li_8 = TimeMonth(ai_0);
   int li_12 = TimeDay(ai_0);
   int l_hour_16 = TimeHour(ai_0);
   int l_minute_20 = TimeMinute(ai_0);
   li_12--;
   if (li_12 == 0) {
      li_8--;
      if (li_8 == 0) {
         li_4--;
         li_8 = 12;
      }
      if (li_8 == 1 || li_8 == 3 || li_8 == 5 || li_8 == 7 || li_8 == 8 || li_8 == 10 || li_8 == 12) li_12 = 31;
      if (li_8 == 2) {
         if (MathMod(li_4, 4) == 0.0) li_12 = 29;
         else li_12 = 28;
      }
      if (li_8 == 4 || li_8 == 6 || li_8 == 9 || li_8 == 11) li_12 = 30;
   }
   return (StrToTime(li_4 + "." + li_8 + "." + li_12 + " " + l_hour_16 + ":" + l_minute_20));
}

void DrawObjects(int ai_0, string a_name_4, string as_12, string as_20) {
   int l_str2time_28 = StrToTime(TimeToStr(ai_0, TIME_DATE) + " " + as_12);
   int l_str2time_32 = StrToTime(TimeToStr(ai_0, TIME_DATE) + " " + as_20);
   int l_shift_52 = iBarShift(NULL, 0, l_str2time_28);
   int l_shift_56 = iBarShift(NULL, 0, l_str2time_32);
   double l_high_36 = High[iHighest(NULL, 0, MODE_HIGH, l_shift_52 - l_shift_56, l_shift_56)];
   double ld_44 = Low[iLowest(NULL, 0, MODE_LOW, l_shift_52 - l_shift_56, l_shift_56)];
   l_high_36 = 0;
   ld_44 = 2.0 * ld_44;
   ObjectSet(a_name_4, OBJPROP_TIME1, l_str2time_28);
   ObjectSet(a_name_4, OBJPROP_PRICE1, l_high_36);
   ObjectSet(a_name_4, OBJPROP_TIME2, l_str2time_32);
   ObjectSet(a_name_4, OBJPROP_PRICE2, ld_44);
}

int getSignal() {
   int li_ret_0 = checkMomentum();
   int li_4 = checkCCI();
   if (li_ret_0 != li_4) return (0);
   return (li_ret_0);
}

int checkMomentum() {
   double l_imomentum_0 = iMomentum(NULL, 0, 60, PRICE_TYPICAL, 1);
   double ld_8 = 100.0 * (l_imomentum_0 - 100.0);
   if (MathAbs(ld_8) > 80.0) return (0);
   if (ld_8 > 0.0) return (1);
   if (ld_8 < 0.0) return (-1);
   return (0);
}

int checkCCI() {
   double l_icci_0 = iCCI(NULL, 0, 60, PRICE_TYPICAL, 1);
   if (l_icci_0 > 0.0) return (1);
   if (l_icci_0 < 0.0) return (-1);
   return (0);
}

void SetSignalVariables(int ai_0) {
   string ls_4;
   double l_open_12;
   string l_dbl2str_20;
   color l_color_28;
   double ld_32;
   double ld_40;
   if (ai_0 == 1) {
      ls_4 = "LONG";
      l_color_28 = Green;
      l_open_12 = Open[0];
      l_dbl2str_20 = DoubleToStr(l_open_12, Digits);
   } else {
      if (ai_0 == -1) {
         ls_4 = "SHORT";
         l_color_28 = Green;
         l_open_12 = Open[0];
         l_dbl2str_20 = DoubleToStr(l_open_12, Digits);
      } else {
         if (ai_0 == 1000) {
            ls_4 = "not time for trade";
            l_color_28 = LabelColor;
            l_dbl2str_20 = "-";
         } else {
            ls_4 = "NO TRADE";
            l_color_28 = LabelColor;
            l_dbl2str_20 = "-";
         }
      }
   }
   ObjectSetText("linetime", "Signal: " + ls_4, 9, "Tahoma", l_color_28);
   ObjectSetText("lineprice", "Ideal entry price: " + l_dbl2str_20, 8, "Tahoma", LabelColor);
   if (ai_0 == 1 || ai_0 == -1) {
      ld_32 = l_open_12 - gd_128 * ai_0;
      ld_40 = l_open_12 + gd_136 * ai_0;
      ObjectSetText("linept", "Profit at: " + DoubleToStr(ld_40, Digits), 8, "Tahoma", LabelColor);
      ObjectSetText("linesl", "Stop loss at: " + DoubleToStr(ld_32, Digits), 8, "Tahoma", LabelColor);
      return;
   }
   ObjectSetText("linept", "Profit at: -", 8, "Tahoma", LabelColor);
   ObjectSetText("linesl", "Stop loss at: -", 8, "Tahoma", LabelColor);
}
