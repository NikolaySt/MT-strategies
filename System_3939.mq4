/*
   Generated by EX4-TO-MQ4 decompiler V4.0.224.1 []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "Copyright 2009 Ariadna Ltd"
#property link      ""

#include <stdlib.mqh>

string gs_unused_76 = "";
string gs_unused_84 = "";
int gi_92 = 3939;
extern string Expert_Name = "Ñìåòêà:3939";
extern string Information = "Íà÷àëåí êàïèòàë 1`000$ ïðè ðèñê - 2.5%";
bool gi_112 = TRUE;
bool gi_116 = TRUE;
int gi_120 = 60;
int gi_124 = 1440;
int g_timeframe_128 = PERIOD_H1;
string gs_unused_132 = "------------------------------------SYSTEM 1 MNG-------------------------------------------";
int gi_140 = 30;
double gd_144 = 2.0;
int gi_152 = 0;
int gi_156 = 3;
double gd_160 = 0.9;
double gd_168 = 0.3;
string gs_unused_176 = "------------------------------------SYSTEM 2 MNG-------------------------------------------";
int gi_184 = 15;
int gi_188 = 17;
int gi_192 = 27;
double gd_196 = 1.7;
int gi_204 = 165;
int gi_208 = 1;
int gi_212 = 2;
double gd_216 = 1.6;
double gd_224 = 0.6;
string gs_unused_232 = "------------------------------------------------------------------------------------------";
string gs_sys1_240 = "Sys1";
int gi_248 = -1;
int g_datetime_252;
int g_datetime_256;
string gs_sys2_260 = "Sys2";
datetime g_time_268;
int gi_272 = -1;
string gs_unused_276 = "//-------ÓÈÏÐÀÂËÅÍÈÅ ÍÀ ÊÀÏÈÒÀËÀ---------";
bool gi_284 = FALSE;
double gd_288 = 0.1;
double gd_296 = 1.0;
string gs_unused_304 = "//---------------------------------------------------------------------";
double g_minlot_312;
double g_maxlot_320;
double g_lotsize_328;
double g_lotstep_336;
int gi_344 = 0;
int g_color_348 = Lime;
int g_color_352 = White;
int g_color_356 = Red;
int g_color_360 = Yellow;
int gi_unused_364 = 16777215;
int gi_unused_368 = 11823615;
int gi_unused_372 = 12632256;
int gi_unused_376 = 13353215;
int g_color_380 = Red;
int gi_384 = 50;
int gi_388 = 100;
int gi_392 = 20;
int g_stoplevel_396 = 8;
int gi_400 = 300;
int g_stoplevel_404 = 30;
int g_slippage_408 = 2;
bool gi_412 = TRUE;
string gs_416 = "alert.wav";
double gd_424 = 1.0;
int gi_432 = 5;
int gi_436 = 0;
double g_deviation_440 = 0.2;
int gi_448 = 8;
int gi_452 = 2;
int g_period_456 = 2;
double gd_460 = 0.2;
int g_datetime_468 = 0;
string gs_unused_472 = "------------------------------------SYSTEM 2 Signal Params-------------------------------";
int gi_480 = 8;
int gi_484 = 2;
int g_period_488 = 27;
int gi_492 = 3;
string gs_unused_496 = "----------------------------------------------------------------------------------------";
string gs_unused_504 = "------------------------------------SYSTEM 1  Signal Params-------------------------------";
int gi_512 = 3;
int gi_516 = 7;
int gi_520 = 14;
int gi_524 = 6;
double gd_528 = 0.382;
double gd_536 = 0.3;
double gd_unused_544 = 0.0;
double gd_552 = 0.2;
double gd_560 = 0.3;
string gs_unused_568 = "-----------------------------------------------------------------------------------------";
int gi_576 = 60;
int gi_580 = 60;
int gi_584 = 240;
int gi_588 = 1440;
int gi_592 = 10080;

void InitializeMM() {
   g_minlot_312 = MarketInfo(Symbol(), MODE_MINLOT);
   g_maxlot_320 = MarketInfo(Symbol(), MODE_MAXLOT);
   g_lotsize_328 = MarketInfo(Symbol(), MODE_LOTSIZE);
   g_lotstep_336 = MarketInfo(Symbol(), MODE_LOTSTEP);
   switch (g_lotstep_336) {
   case 0.0001:
      gi_344 = 4;
      return;
   case 0.001:
      gi_344 = 3;
      return;
   case 0.01:
      gi_344 = 2;
      return;
   case 0.1:
      gi_344 = 1;
      return;
   case 1.0:
      gi_344 = 0;
      return;
   }
}

double CalcLotSizeMM(int ai_0) {
   double ld_4;
   double ld_12;
   if (gi_284) {
      ld_4 = g_lotsize_328 * g_lotstep_336 * Point;
      ld_12 = AccountEquity() * (gd_296 / 100.0);
      gd_288 = NormalizeDouble(ld_12 / (ld_4 * ai_0) / 100.0, gi_344);
   }
   if (gd_288 > g_maxlot_320) gd_288 = g_maxlot_320;
   if (gd_288 < g_minlot_312) gd_288 = g_minlot_312;
   return (gd_288);
}

void InitDigits() {
   if (Digits == 4) gd_424 = 1;
   if (Digits == 5) gd_424 = 10;
   if (Digits == 2) gd_424 = 1;
   if (Digits == 3) gd_424 = 10;
}

void MarketInit() {
   InitDigits();
   g_slippage_408 = g_slippage_408 * gd_424;
   gi_384 = gi_384 * gd_424;
   gi_388 = gi_388 * gd_424;
   gi_392 = gi_392 * gd_424;
   gi_400 = gi_400 * gd_424;
   g_stoplevel_396 = MarketInfo(Symbol(), MODE_STOPLEVEL);
   g_stoplevel_404 = MarketInfo(Symbol(), MODE_STOPLEVEL);
}

double CalculateStopLoss(int ai_0, int a_timeframe_4, int ai_8, int ai_12, double a_pips_16, double a_period_24) {
   double ld_ret_32;
   double ld_76;
   double l_isar_84;
   double l_price_40 = 0;
   int l_shift_48 = iBarShift(NULL, a_timeframe_4, ai_12);
   double l_ilow_52 = iLow(NULL, a_timeframe_4, l_shift_48);
   double l_ihigh_60 = iHigh(NULL, a_timeframe_4, l_shift_48);
   double l_iclose_68 = iClose(NULL, a_timeframe_4, l_shift_48);
   if (ai_0 == 0) l_price_40 = Bid;
   if (ai_0 == 1) l_price_40 = Ask;
   if (ai_8 == 1) {
      if (ai_0 == 0) ld_ret_32 = l_price_40 - a_pips_16 * Point;
      else ld_ret_32 = l_price_40 + a_pips_16 * Point;
   }
   if (ai_8 == 2) ld_ret_32 = a_pips_16;
   if (ai_8 == 3) {
      if (a_pips_16 <= 0.0) a_pips_16 = 2;
      if (a_period_24 <= 0.0) a_period_24 = 33;
      ld_76 = a_pips_16 * iATR(NULL, a_timeframe_4, a_period_24, l_shift_48);
      if (ai_0 == 0) ld_ret_32 = l_price_40 - ld_76;
      else ld_ret_32 = l_price_40 + ld_76;
   }
   if (ai_8 == 4) {
      if (ai_0 == 0) ld_ret_32 = MathMin(l_price_40 - a_period_24 * Point, MathMin(l_price_40, iLow(NULL, a_timeframe_4, iLowest(NULL, a_timeframe_4, MODE_LOW, a_pips_16, l_shift_48))));
      else {
         ld_ret_32 = MathMax(l_price_40 + a_period_24 * Point, MathMax(l_price_40, iHigh(NULL, a_timeframe_4, iHighest(NULL, a_timeframe_4, MODE_HIGH, a_pips_16, l_shift_48)) +
            Ask - Bid));
      }
   }
   if (ai_8 == 7) {
      if (a_pips_16 <= 0.0) a_pips_16 = 0.02;
      if (a_period_24 <= 0.0) a_period_24 = 0.2;
      l_isar_84 = iSAR(NULL, a_timeframe_4, a_pips_16, a_period_24, l_shift_48);
      if (ai_0 == 0 && l_isar_84 < l_price_40) ld_ret_32 = l_isar_84;
      if (ai_0 == 1 && l_isar_84 > l_price_40) ld_ret_32 = l_isar_84 + Ask - Bid + 1.0 * Point;
   }
   ld_ret_32 = NormalizeDouble(ld_ret_32, Digits);
   if (ld_ret_32 > 0.0 && gi_400 > 0) {
      if (ai_0 == 0) ld_ret_32 = MathMax(ld_ret_32, l_price_40 - gi_400) - 1.0 * Point;
      if (ai_0 == 1) ld_ret_32 = MathMin(ld_ret_32, l_price_40 + gi_400) + Ask - Bid + 1.0 * Point;
   }
   if (ld_ret_32 > 0.0) {
      if (ai_0 == 0) ld_ret_32 = MathMin(ld_ret_32, l_price_40 - g_stoplevel_396 * Point);
      if (ai_0 == 1) ld_ret_32 = MathMax(ld_ret_32, l_price_40 + g_stoplevel_396 * Point);
   }
   return (ld_ret_32);
}

double OpenSell(int ai_0, int a_timeframe_4, int ai_8, double ad_12, double ad_20, string a_comment_28, int ai_36, double ad_40 = 0.0, bool ai_48 = TRUE) {
   int l_shift_52;
   double l_ilow_56;
   double l_ihigh_64;
   RefreshRates();
   if (ai_48) {
      l_shift_52 = iBarShift(NULL, a_timeframe_4, ai_36);
      l_ilow_56 = iLow(NULL, a_timeframe_4, l_shift_52);
      l_ihigh_64 = iHigh(NULL, a_timeframe_4, l_shift_52);
      if (Bid > l_ilow_56 + (l_ihigh_64 - l_ilow_56) / 2.0) return (-1);
   }
   double l_lots_72 = 0;
   double l_price_80 = 0;
   l_price_80 = CalculateStopLoss(1, ai_0, ai_8, ai_36, ad_12, ad_20);
   l_lots_72 = CalcLotSizeMM(NormalizeDouble((l_price_80 - Bid) / Point, 0));
   a_comment_28 = a_comment_28 + "#" + DoubleToStr(MathAbs((l_price_80 - Bid) / Point), 0) + "#" + DoubleToStr(Period(), 0);
   if (ad_40 > 0.0) ad_40 = Bid - ad_40 * Point;
   if (ad_40 > 0.0) ad_40 = MathMin(ad_40, Bid - g_stoplevel_404 * Point);
   int l_ticket_88 = OrderSend(Symbol(), OP_SELL, l_lots_72, Bid, g_slippage_408, l_price_80, ad_40, a_comment_28, 13939, 0, g_color_356);
   if (l_ticket_88 > 0) {
      if (gi_412) PlaySound(gs_416);
      SuccessOperation();
      return (l_ticket_88);
   }
   string ls_92 = "*** ERROR OpenSell *** " + Bid + "," + gi_384 + "," + ad_40 + " *** ";
   ViewLastError(ls_92, GetLastError());
   return (-1);
}

double OpenBuy(int ai_0, int a_timeframe_4, int ai_8, double ad_12, double ad_20, string a_comment_28, int ai_36, double ad_40 = 0.0, bool ai_48 = TRUE) {
   int l_shift_52;
   double l_ilow_56;
   double l_ihigh_64;
   RefreshRates();
   if (ai_48) {
      l_shift_52 = iBarShift(NULL, a_timeframe_4, ai_36);
      l_ilow_56 = iLow(NULL, a_timeframe_4, l_shift_52);
      l_ihigh_64 = iHigh(NULL, a_timeframe_4, l_shift_52);
      if (Ask < l_ilow_56 + (l_ihigh_64 - l_ilow_56) / 2.0) return (0);
   }
   double l_lots_72 = 0;
   double l_price_80 = 0;
   l_price_80 = CalculateStopLoss(0, ai_0, ai_8, ai_36, ad_12, ad_20);
   l_lots_72 = CalcLotSizeMM(NormalizeDouble((Ask - l_price_80) / Point, 0));
   a_comment_28 = a_comment_28 + "#" + DoubleToStr(MathAbs((Ask - l_price_80) / Point), 0) + "#" + DoubleToStr(Period(), 0);
   if (ad_40 > 0.0) ad_40 = Ask + ad_40 * Point;
   if (ad_40 > 0.0) ad_40 = MathMax(ad_40, Ask + g_stoplevel_404 * Point);
   int l_ticket_88 = OrderSend(Symbol(), OP_BUY, l_lots_72, Ask, g_slippage_408, l_price_80, ad_40, a_comment_28, 13939, 0, g_color_348);
   if (l_ticket_88 > 0) {
      if (gi_412) PlaySound(gs_416);
      SuccessOperation();
      return (l_ticket_88);
   }
   string ls_92 = "*** ERROR OpenBuy *** " + Ask + "," + gi_384 + "," + ad_40 + " *** ";
   ViewLastError(ls_92, GetLastError());
   return (-1);
}

void ClosePositionsByTradeType(int a_cmd_0, string as_4, int ai_12 = 0) {
   bool l_ord_close_16;
   bool li_20;
   bool li_24 = FALSE;
   RefreshRates();
   while (!li_20) {
      li_24 = FALSE;
      for (int l_pos_28 = 0; l_pos_28 < OrdersTotal(); l_pos_28++) {
         if (OrderSelect(l_pos_28, SELECT_BY_POS, MODE_TRADES)) {
            if (OrderSymbol() == Symbol() && OrderMagicNumber() == 13939 && OrderType() == a_cmd_0 && SignalName(OrderComment()) == as_4) {
               if (a_cmd_0 == OP_BUY)
                  if (Bid - OrderOpenPrice() > ai_12 * Point || ai_12 == 0) l_ord_close_16 = OrderClose(OrderTicket(), OrderLots(), Bid, g_slippage_408, g_color_352);
               if (a_cmd_0 == OP_SELL)
                  if (OrderOpenPrice() - Ask > ai_12 * Point || ai_12 == 0) l_ord_close_16 = OrderClose(OrderTicket(), OrderLots(), Ask, g_slippage_408, g_color_360);
               if (l_ord_close_16) {
                  li_24 = TRUE;
                  if (gi_412) PlaySound(gs_416);
               } else {
                  ViewLastError("ClosePositionsByTradeType - ClosePosition", GetLastError());
                  RefreshRates();
               }
            }
         } else ViewLastError("CloseAllPositionsByTrendReverse - OrderSelect", GetLastError());
      }
      if (!li_24) li_20 = TRUE;
   }
}

void MngSLSave(int a_timeframe_0, string as_4, int ai_12 = 3, int ai_16 = 3, double ad_20 = 1.0, double ad_28 = 0.7) {
   double ld_80;
   double ld_36 = 0;
   double ld_44 = 0;
   double ld_52 = 0;
   int l_shift_60 = iBarShift(NULL, a_timeframe_0, Time[0]);
   double l_ihigh_64 = iHigh(NULL, a_timeframe_0, l_shift_60 + 1);
   double l_ilow_72 = iLow(NULL, a_timeframe_0, l_shift_60 + 1);
   for (int l_pos_88 = 0; l_pos_88 < OrdersTotal(); l_pos_88++) {
      if (OrderSelect(l_pos_88, SELECT_BY_POS, MODE_TRADES)) {
         if (OrderSymbol() == Symbol() && OrderMagicNumber() == 13939 && SignalName(OrderComment()) == as_4) {
            ld_52 = SignalBeginStop(OrderComment()) * Point;
            if (OrderType() == OP_BUY) {
               ld_44 = OrderOpenPrice() - OrderStopLoss();
               if (ld_44 > ld_52 * ad_28 && ld_44 > 0.0 && l_ihigh_64 >= OrderOpenPrice() + ld_44 * ad_20) {
                  ld_36 = OrderOpenPrice() + ai_16 * Point;
                  if (l_ilow_72 < ld_36) ld_36 = l_ilow_72 - (ai_12 + MarketInfo(Symbol(), MODE_SPREAD)) * Point;
                  ld_36 = MathMin(ld_36, Bid - g_stoplevel_396 * Point);
                  ld_36 = NormalizeDouble(ld_36, Digits);
                  ld_80 = NormalizeDouble(OrderStopLoss(), Digits);
                  if (ld_36 > ld_80 && ld_36 != ld_80) {
                     if (OrderModify(OrderTicket(), OrderOpenPrice(), ld_36, OrderTakeProfit(), 0, g_color_380)) {
                        if (gi_412) PlaySound(gs_416);
                     } else ViewLastError("MngSLSave - Buy Order = " + OrderTicket() + ", StopLevel = " + ld_36 + " tmp = " + ld_80, GetLastError());
                  }
               }
            }
            if (OrderType() == OP_SELL) {
               ld_44 = OrderStopLoss() - OrderOpenPrice();
               if (ld_44 > ld_52 * ad_28 && ld_44 > 0.0 && l_ilow_72 <= OrderOpenPrice() - ld_44 * ad_20) {
                  ld_36 = OrderOpenPrice() - ai_16 * Point;
                  if (l_ihigh_64 > ld_36) ld_36 = l_ihigh_64 + (MarketInfo(Symbol(), MODE_SPREAD) + ai_12) * Point;
                  ld_36 = MathMax(ld_36, Ask + g_stoplevel_396 * Point);
                  ld_36 = NormalizeDouble(ld_36, Digits);
                  ld_80 = NormalizeDouble(OrderStopLoss(), Digits);
                  if (ld_36 < ld_80 && ld_36 != ld_80) {
                     if (OrderModify(OrderTicket(), OrderOpenPrice(), ld_36, OrderTakeProfit(), 0, g_color_380)) {
                        if (gi_412) PlaySound(gs_416);
                     } else ViewLastError("MngSLSave - Sell Order = " + OrderTicket() + ", StopLevel = " + ld_36 + " tmp = " + ld_80, GetLastError());
                  }
               }
            }
         }
      }
   }
}

void MngSLFractalProfit(int a_timeframe_0, string as_4) {
   double ld_44;
   double ld_unused_12 = 0;
   double ld_20 = 0;
   int l_shift_28 = 0;
   int li_32 = 0;
   double ld_unused_36 = 0;
   li_32 = iBarShift(NULL, a_timeframe_0, Time[0]) + 1;
   for (int l_pos_52 = 0; l_pos_52 < OrdersTotal(); l_pos_52++) {
      if (OrderSelect(l_pos_52, SELECT_BY_POS, MODE_TRADES)) {
         if (OrderSymbol() == Symbol() && OrderMagicNumber() == 13939 && SignalName(OrderComment()) == as_4) {
            l_shift_28 = iBarShift(NULL, a_timeframe_0, OrderOpenTime());
            if (OrderType() == OP_BUY) {
               ld_20 = LevelFrStopLoss(1, a_timeframe_0, l_shift_28, li_32);
               if (ld_20 > 0.0) {
                  ld_20 = MathMin(ld_20, Bid - g_stoplevel_396 * Point) - MarketInfo(Symbol(), MODE_SPREAD) * Point;
                  ld_20 = NormalizeDouble(ld_20, Digits);
                  ld_44 = NormalizeDouble(OrderStopLoss(), Digits);
                  if (ld_20 > ld_44 && ld_20 != ld_44 && ld_20 != 0.0 && ld_20 < Bid) {
                     if (OrderModify(OrderTicket(), OrderOpenPrice(), ld_20, OrderTakeProfit(), 0, g_color_380)) {
                        if (!(gi_412)) break;
                        PlaySound(gs_416);
                        return;
                     }
                     ViewLastError("MngSLFractalProfit, Buy Order = " + OrderTicket() + ", StopLevel = " + ld_20 + " tmp = " + ld_44, GetLastError());
                     return;
                  }
               }
            }
            if (OrderType() == OP_SELL) {
               ld_20 = LevelFrStopLoss(-1, a_timeframe_0, l_shift_28, li_32);
               if (ld_20 > 0.0) {
                  ld_20 = MathMax(ld_20, Ask + g_stoplevel_396 * Point) + MarketInfo(Symbol(), MODE_SPREAD) * Point;
                  ld_20 = NormalizeDouble(ld_20, Digits);
                  ld_44 = NormalizeDouble(OrderStopLoss(), Digits);
                  if (ld_20 < ld_44 && ld_20 != ld_44 && ld_20 > Ask) {
                     if (OrderModify(OrderTicket(), OrderOpenPrice(), ld_20, OrderTakeProfit(), 0, g_color_380)) {
                        if (!(gi_412)) break;
                        PlaySound(gs_416);
                        return;
                     }
                     ViewLastError("MngSLFractalProfit, Sell Order = " + OrderTicket() + ", StopLevel = " + ld_20 + " tmp = " + ld_44, GetLastError());
                     return;
                  }
               }
            }
         }
      }
   }
}

double LevelFrStopLoss(int ai_0, int a_timeframe_4, int ai_8, int ai_12) {
   int li_16 = ai_0;
   int li_20 = -1;
   int l_count_24 = 0;
   double ld_28 = 0;
   double ld_ret_36 = 0;
   double ld_ret_44 = 99999999;
   double ld_52 = 99999999;
   bool li_60 = FALSE;
   double ld_64 = 0;
   bool li_72 = FALSE;
   bool li_76 = FALSE;
   bool li_80 = FALSE;
   for (int li_84 = ai_8; li_84 >= ai_12; li_84--) {
      if (li_16 == -1) {
         if (ld_ret_36 != 0.0 && iClose(NULL, a_timeframe_4, li_84) > ld_ret_36) {
            li_16 = 1;
            li_76 = TRUE;
            ld_ret_44 = ld_52;
            ld_52 = 99999999;
            li_60 = FALSE;
         }
      } else {
         if (li_16 == 1) {
            if (ld_ret_44 != 99999999.0 && iClose(NULL, a_timeframe_4, li_84) < ld_ret_44) {
               li_16 = -1;
               li_76 = TRUE;
               ld_ret_36 = ld_64;
               ld_64 = 0;
               li_72 = FALSE;
            }
         }
      }
      if (li_16 == -1) {
         if (iClose(NULL, a_timeframe_4, li_84) < ld_52) li_80 = TRUE;
         ld_28 = Fractals(a_timeframe_4, gi_432, MODE_LOWER, li_84 + 1);
         if (ld_28 != 0.0) {
            if (ld_28 < ld_52) {
               ld_52 = ld_28;
               li_60 = li_84;
               li_76 = TRUE;
            }
         }
      }
      if (li_16 == 1) {
         if (iClose(NULL, a_timeframe_4, li_84) > ld_64) li_80 = TRUE;
         ld_28 = Fractals(a_timeframe_4, gi_432, MODE_UPPER, li_84 + 1);
         if (ld_28 != 0.0) {
            if (ld_28 > ld_64) {
               ld_64 = ld_28;
               li_72 = li_84;
               li_76 = TRUE;
            }
         }
      }
      if (li_80) {
         ld_28 = 0;
         if (li_16 == 1) li_20 = li_72;
         if (li_16 == -1) li_20 = li_60;
         if (li_20 != 0) {
            for (l_count_24 = li_84; l_count_24 <= li_20; l_count_24++) {
               if (li_16 == -1) {
                  ld_28 = Fractals(a_timeframe_4, gi_432, MODE_UPPER, l_count_24 + 1);
                  if (ld_28 != 0.0) {
                     if (li_76) {
                        ld_ret_36 = ld_28;
                        li_76 = FALSE;
                     }
                     if (ld_28 > ld_ret_36) ld_ret_36 = ld_28;
                  }
               }
               if (li_16 == 1) {
                  ld_28 = Fractals(a_timeframe_4, gi_432, MODE_LOWER, l_count_24 + 1);
                  if (ld_28 != 0.0) {
                     if (li_76) {
                        ld_ret_44 = ld_28;
                        li_76 = FALSE;
                     }
                     if (ld_28 < ld_ret_44) ld_ret_44 = ld_28;
                  }
               }
            }
         }
         li_80 = FALSE;
      }
      if (li_16 == -1)
         if (ld_ret_36 != 99999999.0 && ld_ret_36 != 0.0) return (ld_ret_36);
      if (li_16 == 1)
         if (ld_ret_44 != 99999999.0 && ld_ret_44 != 0.0) return (ld_ret_44);
   }
   return (0);
}

double Fractals(int a_timeframe_0, int ai_4, int ai_8, int ai_12) {
   if (ai_4 == 5) return (iFractals(NULL, a_timeframe_0, ai_8, ai_12));
   return (0.0);
}

string SignalName(string as_0) {
   int li_8 = StringFind(as_0, "#", 0);
   if (li_8 > 0) return (StringSubstr(as_0, 0, li_8));
   return (as_0);
}

string SignalDate(string as_0) {
   int li_8 = StringFind(as_0, "#", 0);
   int li_12 = StringFind(as_0, "#", li_8 + 1);
   if (li_8 > 0 && li_12 > 0) return (StringSubstr(as_0, li_8 + 1, li_12 - li_8 - 1));
   return ("0");
}

int SignalBeginStop(string as_0) {
   int li_8 = StringFind(as_0, "#", StringFind(as_0, "#", 0) + 1);
   int li_12 = StringFind(as_0, "#", li_8 + 1);
   if (li_8 > 0 && li_12 > 0) return (StrToInteger(StringSubstr(as_0, li_8 + 1, li_12 - li_8 - 1)));
   return (0);
}

int CloseOverHighest(int a_timeframe_0, int ai_4, int ai_8 = 2) {
   double ld_unused_12 = 0;
   int li_20 = iBarShift(NULL, a_timeframe_0, Time[0]) + 1;
   int l_highest_24 = iHighest(NULL, a_timeframe_0, MODE_HIGH, ai_4, li_20 + ai_8);
   double l_ihigh_28 = iHigh(NULL, a_timeframe_0, l_highest_24);
   double l_iclose_36 = iClose(NULL, a_timeframe_0, li_20);
   double l_iopen_44 = iOpen(NULL, a_timeframe_0, li_20);
   double l_ihigh_52 = iHigh(NULL, a_timeframe_0, li_20);
   double l_ilow_60 = iLow(NULL, a_timeframe_0, li_20);
   return (l_iclose_36 > l_ihigh_28 && (l_iclose_36 > l_iopen_44 && l_iclose_36 > 0.0 * (l_ihigh_52 - l_ilow_60) + l_ilow_60));
}

int CloseUnderLowest(int a_timeframe_0, int ai_4, int ai_8 = 2) {
   double ld_unused_12 = 0;
   int li_20 = iBarShift(NULL, a_timeframe_0, Time[0]) + 1;
   int l_lowest_24 = iLowest(NULL, a_timeframe_0, MODE_LOW, ai_4, li_20 + ai_8);
   double l_ilow_28 = iLow(NULL, a_timeframe_0, l_lowest_24);
   double l_iclose_36 = iClose(NULL, a_timeframe_0, li_20);
   double l_iopen_44 = iOpen(NULL, a_timeframe_0, li_20);
   double l_ihigh_52 = iHigh(NULL, a_timeframe_0, li_20);
   double l_ilow_60 = iLow(NULL, a_timeframe_0, li_20);
   return (l_iclose_36 < l_ilow_28 && (l_iclose_36 < l_iopen_44 && l_iclose_36 < l_ihigh_52 - 0.0 * (l_ihigh_52 - l_ilow_60)));
}

double SearchFractalInPeriod(int ai_0, int a_timeframe_4, int ai_8, int ai_12) {
   int li_16 = iBarShift(NULL, a_timeframe_4, Time[1]) + MathRound(ai_8 / 2) + 1.0;
   double ld_ret_20 = 0;
   for (int li_28 = li_16; li_28 <= li_16 + ai_12; li_28++) {
      if (ai_0 == 1) {
         ld_ret_20 = UpFractalFloat(ai_8, a_timeframe_4, li_28);
         if (ld_ret_20 != 0.0) break;
      }
      if (ai_0 == -1) {
         ld_ret_20 = DownFractalFloat(ai_8, a_timeframe_4, li_28);
         if (ld_ret_20 != 0.0) break;
      }
   }
   return (ld_ret_20);
}

double PivotLevel(int ai_0, int a_timeframe_4, double ad_8) {
   int li_16 = iBarShift(NULL, a_timeframe_4, Time[0]) + 1;
   double l_iclose_20 = iClose(NULL, a_timeframe_4, li_16);
   double l_iopen_28 = iOpen(NULL, a_timeframe_4, li_16);
   double l_ihigh_36 = iHigh(NULL, a_timeframe_4, li_16);
   double l_ilow_44 = iLow(NULL, a_timeframe_4, li_16);
   double l_ilow_52 = iLow(NULL, a_timeframe_4, li_16 + 1);
   if (ai_0 == 1) return ((l_ihigh_36 - l_ilow_44) * ad_8 + l_ilow_44);
   return (l_ihigh_36 - (l_ihigh_36 - l_ilow_44) * ad_8);
}

double UpFractalFloat(int ai_0, int a_timeframe_4, int ai_8) {
   for (int li_12 = 1; li_12 <= MathRound(ai_0 / 2); li_12++) {
      if (!(iHigh(NULL, a_timeframe_4, ai_8) >= iHigh(NULL, a_timeframe_4, ai_8 + li_12))) return (0);
      if (!(iHigh(NULL, a_timeframe_4, ai_8) >= iHigh(NULL, a_timeframe_4, ai_8 - li_12))) return (0);
   }
   return (iHigh(NULL, a_timeframe_4, ai_8));
}

double DownFractalFloat(int ai_0, int a_timeframe_4, int ai_8) {
   for (int li_12 = 1; li_12 <= MathRound(ai_0 / 2); li_12++) {
      if (!(iLow(NULL, a_timeframe_4, ai_8) <= iLow(NULL, a_timeframe_4, ai_8 + li_12))) return (0);
      if (!(iLow(NULL, a_timeframe_4, ai_8) <= iLow(NULL, a_timeframe_4, ai_8 - li_12))) return (0);
   }
   return (iLow(NULL, a_timeframe_4, ai_8));
}

int CountOpenAllSignal(string as_0 = "") {
   int l_count_8 = 0;
   for (int l_pos_12 = 0; l_pos_12 < OrdersTotal(); l_pos_12++) {
      if (OrderSelect(l_pos_12, SELECT_BY_POS, MODE_TRADES)) {
         if (OrderSymbol() == Symbol() && OrderMagicNumber() == 13939)
            if (SignalName(OrderComment()) == as_0) l_count_8++;
      }
   }
   return (l_count_8);
}

int IsOpenPositionTimeFr(string as_0, string as_8) {
   int li_unused_16 = 0;
   for (int l_pos_20 = 0; l_pos_20 < OrdersTotal(); l_pos_20++) {
      if (OrderSelect(l_pos_20, SELECT_BY_POS, MODE_TRADES)) {
         if (OrderSymbol() == Symbol() && OrderMagicNumber() == 13939)
            if (SignalDate(OrderComment()) == as_8 && SignalName(OrderComment()) == as_0) return (1);
      }
   }
   return (0);
}

bool IsOpenPositionName(string as_0) {
   int li_unused_8 = 0;
   for (int l_pos_12 = 0; l_pos_12 < OrdersTotal(); l_pos_12++) {
      if (OrderSelect(l_pos_12, SELECT_BY_POS, MODE_TRADES)) {
         if (OrderSymbol() == Symbol() && OrderMagicNumber() == 13939) {
            if (OrderType() == OP_SELL || OrderType() == OP_BUY)
               if (SignalName(OrderComment()) == as_0) return (TRUE);
         }
      }
   }
   return (FALSE);
}

int IsTimePosByCurrHour_History(string as_0, int a_timeframe_8) {
   int l_datetime_24;
   int li_unused_12 = 0;
   int l_datetime_16 = iTime(NULL, a_timeframe_8, 0);
   int l_hour_28 = TimeHour(l_datetime_16);
   int l_day_32 = TimeDay(l_datetime_16);
   int l_month_36 = TimeMonth(l_datetime_16);
   int l_year_40 = TimeYear(l_datetime_16);
   for (int l_pos_44 = OrdersHistoryTotal() - 1; l_pos_44 >= 0; l_pos_44--) {
      if (OrderSelect(l_pos_44, SELECT_BY_POS, MODE_HISTORY)) {
         if (OrderSymbol() == Symbol() && OrderMagicNumber() == 13939) {
            if (SignalName(OrderComment()) == as_0) {
               l_datetime_24 = OrderCloseTime();
               if (TimeYear(l_datetime_24) == l_year_40 && TimeMonth(l_datetime_24) == l_month_36 && TimeDay(l_datetime_24) == l_day_32 && TimeHour(l_datetime_24) == l_hour_28) return (1);
            }
         }
      }
   }
   return (0);
}

int SuccessOperation() {
   return (0);
}

int ViewLastError(string as_0, int ai_8) {
   Print(as_0, " - error(", ai_8, "): ", ErrorDescription(ai_8));
   string l_name_12 = "ErrorLog.txt";
   int l_file_20 = FileOpen(l_name_12, FILE_WRITE|FILE_READ, ',');
   if (l_file_20 < 1) {
      ViewLastError("File " + l_name_12 + ", the last error is ", GetLastError());
      return (0);
   }
   if (FileSize(l_file_20) > 0) FileSeek(l_file_20, 0, SEEK_END);
   string ls_24 = TimeToStr(Time[0]) + ": " + as_0 + " - error(" + ai_8 + "): " + ErrorDescription(ai_8);
   FileWrite(l_file_20, ls_24);
   FileClose(l_file_20);
   return (0);
}

int TrendDirection(int a_timeframe_0, int &ai_4) {
   int l_shift_8 = iBarShift(NULL, a_timeframe_0, Time[0]);
   double ld_12 = TrendBaseLine(a_timeframe_0, l_shift_8 + 1, MODE_UPPER);
   double ld_20 = TrendBaseLine(a_timeframe_0, l_shift_8 + 1, MODE_LOWER);
   if (iClose(NULL, a_timeframe_0, l_shift_8 + 1) > ld_12 && ai_4 == -1 || ai_4 == 0) {
      ai_4 = 1;
      g_datetime_468 = iTime(NULL, a_timeframe_0, l_shift_8 + 1);
   } else {
      if (iClose(NULL, a_timeframe_0, l_shift_8 + 1) < ld_20 && ai_4 == 1 || ai_4 == 0) {
         ai_4 = -1;
         g_datetime_468 = iTime(NULL, a_timeframe_0, l_shift_8 + 1);
      }
   }
   return (1);
}

double TrendBaseLine(int a_timeframe_0, int ai_4, int ai_8 = 0) {
   int l_period_12;
   int li_16;
   if (ParametersBaseLine(a_timeframe_0, l_period_12, li_16)) {
      if (ai_8 == MODE_BASE) return (iMA(NULL, a_timeframe_0, l_period_12, li_16, MODE_SMMA, PRICE_MEDIAN, ai_4));
      if (ai_8 == MODE_UPPER) return (MathMax(iMA(NULL, a_timeframe_0, l_period_12, li_16, MODE_SMMA, PRICE_MEDIAN, ai_4) + iATR(NULL, a_timeframe_0, g_period_456, ai_4) * gd_460, iEnvelopes(NULL, a_timeframe_0, l_period_12, MODE_SMMA, li_16, PRICE_MEDIAN, g_deviation_440, ai_8, ai_4)));
      if (ai_8 != MODE_LOWER) return (0.0);
      return (MathMin(iMA(NULL, a_timeframe_0, l_period_12, li_16, MODE_SMMA, PRICE_MEDIAN, ai_4) - iATR(NULL, a_timeframe_0, g_period_456, ai_4) * gd_460, iEnvelopes(NULL, a_timeframe_0, l_period_12, MODE_SMMA, li_16, PRICE_MEDIAN, g_deviation_440, ai_8, ai_4)));
   }
   return (-1);
}

bool ParametersBaseLine(int ai_0, int &ai_4, int &ai_8) {
   int li_12 = ai_0;
   if (li_12 == 1440) {
      ai_4 = gi_448;
      ai_8 = gi_452;
      return (TRUE);
   }
   return (FALSE);
}

int CreateSignalMATouch(string as_0, int a_timeframe_8, datetime &a_time_12, int &ai_16) {
   int l_shift_20 = iBarShift(NULL, a_timeframe_8, Time[0]);
   datetime l_time_24 = Time[1];
   double l_ima_28 = iMA(NULL, a_timeframe_8, g_period_488, gi_492, MODE_SMMA, PRICE_MEDIAN, l_shift_20 + 1);
   if (iClose(NULL, a_timeframe_8, l_shift_20 + 1) >= l_ima_28 && LineBarTouchMA(a_timeframe_8, 2, gi_484) && CloseOverHighest(a_timeframe_8, gi_480, 1)) {
      if (a_time_12 != l_time_24) {
         a_time_12 = l_time_24;
         ai_16 = 0;
      } else {
         if (!IsOpenPositionTimeFr(as_0, a_time_12)) ai_16 = 0;
         else ai_16 = -1;
      }
   }
   if (iClose(NULL, a_timeframe_8, l_shift_20 + 1) <= l_ima_28 && LineBarTouchMA(a_timeframe_8, 1, gi_484) && CloseUnderLowest(a_timeframe_8, gi_480, 1)) {
      if (a_time_12 != l_time_24) {
         a_time_12 = l_time_24;
         ai_16 = 1;
      } else {
         if (!IsOpenPositionTimeFr(as_0, a_time_12)) ai_16 = 1;
         else ai_16 = -1;
      }
   }
   return (0);
}

int LineBarTouchMA(int a_timeframe_0, int ai_4, int ai_8) {
   double l_ima_16;
   int l_shift_12 = iBarShift(NULL, a_timeframe_0, Time[0]);
   for (int li_24 = 1; li_24 <= ai_8; li_24++) {
      l_ima_16 = iMA(NULL, a_timeframe_0, g_period_488, gi_492, MODE_SMMA, PRICE_MEDIAN, l_shift_12 + li_24);
      if (ai_4 == 2)
         if (iLow(NULL, a_timeframe_0, l_shift_12 + li_24) <= l_ima_16) return (1);
      if (ai_4 == 1)
         if (iHigh(NULL, a_timeframe_0, l_shift_12 + li_24) >= l_ima_16) return (1);
   }
   return (0);
}

int CreateFractalsSignal(string as_0, int ai_8, int a_timeframe_12, int &ai_16, int &a_datetime_20, int &a_datetime_24) {
   if (ai_16 != 0 && gi_436 == -1) ai_16 = -1;
   if (ai_16 != 1 && gi_436 == 1) ai_16 = -1;
   if (ai_16 != -1) return (0);
   if (gi_436 == 0) {
      ai_16 = 0;
      return (0);
   }
   int l_datetime_28 = 0;
   double ld_32 = SignalMasterFractals(ai_8, gi_436, l_datetime_28, gi_512);
   if (ld_32 <= 0.0) return (0);
   double ld_40 = 0;
   double ld_48 = RatioCorection(gi_576, l_datetime_28, ld_40);
   double ld_56 = SearchFractalInPeriod(gi_436, gi_580, gi_516, 25);
   if (ld_56 <= 0.0) return (0);
   double ld_64 = SearchFractalInPeriod(gi_436, gi_584, 3, gi_524);
   if (ld_64 <= 0.0) return (0);
   if (ld_48 < gd_536) return (0);
   if (ld_48 < gd_528 && ld_48 != 0.0) ld_56 = ld_32;
   int l_shift_72 = iBarShift(NULL, a_timeframe_12, Time[0]);
   double ld_76 = PivotLevel(gi_436, gi_588, gd_552);
   double ld_84 = PivotLevel(gi_436, gi_592, gd_560);
   if (gi_436 == 1) {
      if (iClose(NULL, a_timeframe_12, l_shift_72 + 1) >= ld_56 && iClose(NULL, a_timeframe_12, l_shift_72 + 2) <= ld_56 || iLow(NULL, a_timeframe_12, l_shift_72 + 1) < ld_56 &&
         CloseOverHighest(a_timeframe_12, gi_520) && iClose(NULL, a_timeframe_12, l_shift_72 + 1) >= ld_64 && iClose(NULL, a_timeframe_12, l_shift_72 + 1) >= ld_76 && iClose(NULL, a_timeframe_12, l_shift_72 +
         1) >= ld_84) {
         a_datetime_24 = iTime(NULL, a_timeframe_12, l_shift_72 + 1);
         if (a_datetime_20 != l_datetime_28) {
            a_datetime_20 = l_datetime_28;
            ai_16 = 0;
         } else {
            if (!IsOpenPositionTimeFr(as_0, a_datetime_20)) ai_16 = 0;
            else ai_16 = -1;
         }
      }
   }
   if (gi_436 == -1) {
      if (iClose(NULL, a_timeframe_12, l_shift_72 + 1) <= ld_56 && iClose(NULL, a_timeframe_12, l_shift_72 + 2) >= ld_56 || iHigh(NULL, a_timeframe_12, l_shift_72 + 1) > ld_56 &&
         CloseUnderLowest(a_timeframe_12, gi_520) && iClose(NULL, a_timeframe_12, l_shift_72 + 1) <= ld_64 && iClose(NULL, a_timeframe_12, l_shift_72 + 1) <= ld_76 && iClose(NULL, a_timeframe_12, l_shift_72 +
         1) <= ld_84) {
         a_datetime_24 = iTime(NULL, a_timeframe_12, l_shift_72 + 1);
         if (a_datetime_20 != l_datetime_28) {
            a_datetime_20 = l_datetime_28;
            ai_16 = 1;
         } else {
            if (!IsOpenPositionTimeFr(as_0, a_datetime_20)) ai_16 = 1;
            else ai_16 = -1;
         }
      }
   }
   return (0);
}

double SignalMasterFractals(int a_timeframe_0, int ai_4, int &a_datetime_8, int ai_12 = 5) {
   double ld_36;
   a_datetime_8 = 0;
   bool li_16 = FALSE;
   int l_shift_20 = iBarShift(NULL, a_timeframe_0, Time[0]);
   int li_24 = MathRound(ai_12 / 2);
   double ld_ret_28 = 0;
   for (int li_44 = li_24 + 1; li_44 <= li_24 + 15; li_44++) {
      if (ai_4 == 1) {
         ld_36 = TrendBaseLine(a_timeframe_0, l_shift_20 + li_44, MODE_LOWER);
         ld_ret_28 = UpFractalFloat(ai_12, a_timeframe_0, l_shift_20 + li_44);
         if (ld_ret_28 > 0.0) {
            if (ld_ret_28 > ld_36 && !HalfFractalRightCrossMA(a_timeframe_0, ai_4, l_shift_20 + li_44, l_shift_20)) {
               a_datetime_8 = iTime(NULL, a_timeframe_0, l_shift_20 + li_44);
               if (li_16) return (0);
               return (ld_ret_28);
            }
            return (0);
         }
         if (ld_ret_28 == 0.0 && iOpen(NULL, a_timeframe_0, l_shift_20 + li_44) < ld_36 && iClose(NULL, a_timeframe_0, l_shift_20 + li_44) > ld_36) return (0);
      }
      if (ai_4 == -1) {
         ld_36 = TrendBaseLine(a_timeframe_0, l_shift_20 + li_44, MODE_UPPER);
         ld_ret_28 = DownFractalFloat(ai_12, a_timeframe_0, l_shift_20 + li_44);
         if (ld_ret_28 > 0.0) {
            if (ld_ret_28 < ld_36 && !HalfFractalRightCrossMA(a_timeframe_0, ai_4, l_shift_20 + li_44, l_shift_20)) {
               a_datetime_8 = iTime(NULL, a_timeframe_0, l_shift_20 + li_44);
               if (li_16) return (0);
               return (ld_ret_28);
            }
            return (0);
         }
         if (ld_ret_28 == 0.0 && iOpen(NULL, a_timeframe_0, l_shift_20 + li_44) > ld_36 && iClose(NULL, a_timeframe_0, l_shift_20 + li_44) < ld_36) return (0);
      }
   }
   return (0.0);
}

double FindOppositeFractals(int a_timeframe_0, int ai_4, int ai_8, int &a_datetime_12, int ai_16 = 3) {
   a_datetime_12 = 0;
   int l_shift_20 = iBarShift(NULL, a_timeframe_0, ai_4);
   double ld_ret_24 = 0;
   for (int l_shift_32 = l_shift_20; l_shift_32 <= l_shift_20 + 15; l_shift_32++) {
      if (ai_8 == 1) {
         ld_ret_24 = UpFractalFloat(ai_16, a_timeframe_0, l_shift_32);
         if (ld_ret_24 > 0.0) {
            a_datetime_12 = iTime(NULL, a_timeframe_0, l_shift_32);
            return (ld_ret_24);
         }
      }
      if (ai_8 == 2) {
         ld_ret_24 = DownFractalFloat(ai_16, a_timeframe_0, l_shift_32);
         if (ld_ret_24 > 0.0) {
            a_datetime_12 = iTime(NULL, a_timeframe_0, l_shift_32);
            return (ld_ret_24);
         }
      }
   }
   return (0);
}

bool HalfFractalRightCrossMA(int a_timeframe_0, int ai_4, int ai_8, int ai_12) {
   double ld_16;
   for (int li_24 = ai_8; li_24 >= ai_12; li_24--) {
      if (ai_4 == 1) {
         ld_16 = TrendBaseLine(a_timeframe_0, li_24, MODE_LOWER);
         if (iClose(NULL, a_timeframe_0, li_24) < ld_16) return (TRUE);
      }
      if (ai_4 == -1) {
         ld_16 = TrendBaseLine(a_timeframe_0, li_24, MODE_UPPER);
         if (iClose(NULL, a_timeframe_0, li_24) > ld_16) return (TRUE);
      }
   }
   return (FALSE);
}

double RatioCorection(int a_timeframe_0, int ai_4, double &ad_8) {
   int l_datetime_24;
   double ld_28;
   double ld_36;
   int l_highest_44;
   int l_lowest_48;
   double ld_52;
   double ld_60;
   int l_highest_68;
   int l_lowest_72;
   double ld_76;
   double ld_84;
   double ld_100;
   double ld_108;
   double ld_16 = 0;
   if (gi_436 == 1) ld_16 = FindOppositeFractals(gi_124, ai_4, 2, l_datetime_24, gi_512);
   else ld_16 = FindOppositeFractals(gi_124, ai_4, 1, l_datetime_24, gi_512);
   double ld_ret_92 = 0;
   if (ld_16 > 0.0) {
      if (gi_436 == 1) {
         l_highest_44 = iHighest(NULL, a_timeframe_0, MODE_HIGH, gi_124 / a_timeframe_0, iBarShift(NULL, a_timeframe_0, ai_4) - gi_124 / a_timeframe_0);
         l_lowest_48 = iLowest(NULL, a_timeframe_0, MODE_LOW, gi_124 / a_timeframe_0, iBarShift(NULL, a_timeframe_0, l_datetime_24) - gi_124 / a_timeframe_0);
         ld_28 = iHigh(NULL, a_timeframe_0, l_highest_44);
         ld_36 = iLow(NULL, a_timeframe_0, l_lowest_48);
         l_highest_68 = l_highest_44;
         ld_52 = ld_28;
         l_lowest_72 = iLowest(NULL, a_timeframe_0, MODE_LOW, l_highest_68, iBarShift(NULL, a_timeframe_0, Time[1]));
         ld_60 = iLow(NULL, a_timeframe_0, l_lowest_72);
      } else {
         l_highest_44 = iLowest(NULL, a_timeframe_0, MODE_LOW, gi_124 / a_timeframe_0, iBarShift(NULL, a_timeframe_0, ai_4) - gi_124 / a_timeframe_0);
         l_lowest_48 = iHighest(NULL, a_timeframe_0, MODE_HIGH, gi_124 / a_timeframe_0, iBarShift(NULL, a_timeframe_0, l_datetime_24) - gi_124 / a_timeframe_0);
         ld_28 = iLow(NULL, a_timeframe_0, l_highest_44);
         ld_36 = iHigh(NULL, a_timeframe_0, l_lowest_48);
         l_highest_68 = l_highest_44;
         ld_52 = ld_28;
         l_lowest_72 = iHighest(NULL, a_timeframe_0, MODE_HIGH, l_highest_68, iBarShift(NULL, a_timeframe_0, Time[1]));
         ld_60 = iHigh(NULL, a_timeframe_0, l_lowest_72);
      }
      ld_100 = MathAbs(l_highest_44 - l_lowest_48);
      ld_108 = MathAbs(l_highest_68 - l_lowest_72);
      if (ld_100 != 0.0) ad_8 = ld_108 / ld_100;
      else ad_8 = 0;
      ld_76 = MathAbs(ld_28 - ld_36);
      ld_84 = MathAbs(ld_52 - ld_60);
      if (ld_76 != 0.0) ld_ret_92 = ld_84 / ld_76;
      else ld_ret_92 = 0;
   }
   return (ld_ret_92);
}

int init() {
   MarketInit();
   InitializeMM();
   gi_152 = gi_152 * gd_424;
   gi_156 = gi_156 * gd_424;
   gi_208 = gi_208 * gd_424;
   gi_212 = gi_212 * gd_424;
   gi_204 = gi_204 * gd_424;
   gi_284 = TRUE;
   gd_296 = 2.5;
   return (0);
}

int deinit() {
   return (0);
}

int start() {
   if (AccountNumber() != gi_92) {
      //Comment("Åêñïåðòà ðàáîòè ñàìî íà ñìåòêà Áóëáðîêúðñ - " + gi_92);
      //Print("Åêñïåðòà ðàáîòè ñàìî íà ñìåòêà Áóëáðîêúðñ - " + gi_92);
      //return;
   }
   if (Period() > gi_120) {
      Comment("ÂÍÈÌÀÍÈÅ!!! - åêñïåðòà ðàáîòè íà ÷àñîâî íèâî ïî-ìàëêî èëè ðàâíî îò " + gi_120 + ". Ìîëÿ ïðåâêëþ÷åòå!");
      Print("ÂÍÈÌÀÍÈÅ!!! - åêñïåðòà ðàáîòè íà ÷àñîâî íèâî ïî-ìàëêî èëè ðàâíî îò " + gi_120 + ". Ìîëÿ ïðåâêëþ÷åòå!");
      return;
   }
   Comment("Ñèñòåìàòà ðàáîòè!");
   if (gi_112) ProcessSYS1();
   if (gi_116) ProcessSYS2();
   return (0);
}

void ProcessSYS1() {
   TrendDirection(gi_124, gi_436);
   if (IsOpenPositionName(gs_sys1_240)) {
      MngSLSave(g_timeframe_128, gs_sys1_240, gi_152, gi_156, gd_160, gd_168);
      MngSLFractalProfit(gi_124, gs_sys1_240);
      CloseByTrendReverse(gi_124, gs_sys1_240);
      return;
   }
   CreateFractalsSignal(gs_sys1_240, gi_124, g_timeframe_128, gi_248, g_datetime_256, g_datetime_252);
   if (gi_248 == 0 || gi_248 == 1) OpenPositions(gs_sys1_240, gi_248, g_datetime_256, g_datetime_252, gd_144, gi_140, 0);
}

void ProcessSYS2() {
   int l_hour_0 = TimeHour(iTime(NULL, g_timeframe_128, 1));
   if (l_hour_0 >= gi_184 && l_hour_0 <= gi_188) {
      MngSLSave(g_timeframe_128, gs_sys2_260, gi_208, gi_212, gd_216, gd_224);
      MngSLFractalProfit(PERIOD_H4, gs_sys2_260);
      MngSLFractalProfit(PERIOD_D1, gs_sys2_260);
      CreateSignalMATouch(gs_sys2_260, g_timeframe_128, g_time_268, gi_272);
      if (!(gi_272 == 0 || gi_272 == 1)) return;
      if (!IsTimePosByCurrHour_History(gs_sys2_260, g_timeframe_128)) {
         OpenPositions(gs_sys2_260, gi_272, g_time_268, g_time_268, gd_196, gi_192, gi_204, 0);
         return;
      }
      gi_272 = -1;
      return;
   }
   gi_272 = -1;
}

void OpenPositions(string as_0, int &ai_8, int ai_12, int ai_16, double ad_20, double ad_28, int ai_36 = 0, bool ai_40 = TRUE) {
   int li_44 = 0;
   string ls_48 = as_0 + "#" + ai_12;
   li_44 = CountOpenAllSignal(as_0);
   if (ai_8 == 0) {
      if (li_44 == 0) {
         if (OpenBuy(g_timeframe_128, g_timeframe_128, 3, ad_20, ad_28, ls_48, ai_16, ai_36, ai_40) > 0.0) ai_8 = -1;
      } else ai_8 = -1;
   }
   if (ai_8 == 1) {
      if (li_44 == 0) {
         if (OpenSell(g_timeframe_128, g_timeframe_128, 3, ad_20, ad_28, ls_48, ai_16, ai_36, ai_40) > 0.0) ai_8 = -1;
      } else ai_8 = -1;
   }
}

void CloseByTrendReverse(int a_timeframe_0, string as_4) {
   int l_shift_12 = iBarShift(NULL, a_timeframe_0, Time[0]);
   double l_iclose_16 = iClose(NULL, a_timeframe_0, l_shift_12 + 1);
   double ld_24 = TrendBaseLine(a_timeframe_0, l_shift_12 + 1, MODE_UPPER);
   double ld_32 = TrendBaseLine(a_timeframe_0, l_shift_12 + 1, MODE_LOWER);
   if (l_iclose_16 < ld_32) ClosePositionsByTradeType(OP_BUY, as_4);
   if (l_iclose_16 > ld_24) ClosePositionsByTradeType(OP_SELL, as_4);
}